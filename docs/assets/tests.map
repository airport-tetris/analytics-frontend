{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","svo-aircraft-tetris/tests/integration/components/d3/timetable-chart-test.js","svo-aircraft-tetris/tests/test-helper.js","svo-aircraft-tetris/tests/unit/adapters/application-test.js","svo-aircraft-tetris/tests/unit/controllers/index-test.js","svo-aircraft-tetris/tests/unit/instance-initializers/emt-inject-test.js","svo-aircraft-tetris/tests/unit/models/aircraft-stand-test.js","svo-aircraft-tetris/tests/unit/models/timetable-test.js","svo-aircraft-tetris/tests/unit/routes/index-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"svo-aircraft-tetris/tests/integration/components/d3/timetable-chart-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | d3/timetable-chart', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <D3::TimetableChart />\n      */\n      {\n        \"id\": \"dXYzrY31\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[8,\\\"d3/timetable-chart\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <D3::TimetableChart>\n              template block text\n            </D3::TimetableChart>\n          \n      */\n      {\n        \"id\": \"f1BAZoZP\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[2,\\\"\\\\n      \\\"],[8,\\\"d3/timetable-chart\\\",[],[[],[]],[[\\\"default\\\"],[{\\\"statements\\\":[[2,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}]]],[2,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"svo-aircraft-tetris/tests/test-helper\", [\"svo-aircraft-tetris/app\", \"svo-aircraft-tetris/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define(\"svo-aircraft-tetris/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"svo-aircraft-tetris/tests/unit/controllers/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // TODO: Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:index');\n      assert.ok(controller);\n    });\n  });\n});","define(\"svo-aircraft-tetris/tests/unit/instance-initializers/emt-inject-test\", [\"svo-aircraft-tetris/instance-initializers/emt-inject\", \"qunit\", \"ember-resolver\"], function (_emtInject, _qunit, _emberResolver) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Instance Initializer | emt-inject', function (hooks) {\n    hooks.beforeEach(function () {\n      this.TestApplication = class TestApplication extends Ember.Application {};\n      this.TestApplication.instanceInitializer({\n        name: 'initializer under test',\n        initialize: _emtInject.initialize\n      });\n      this.application = this.TestApplication.create({\n        autoboot: false,\n        Resolver: _emberResolver.default\n      });\n      this.instance = this.application.buildInstance();\n    });\n    hooks.afterEach(function () {\n      Ember.run(this.instance, 'destroy');\n      Ember.run(this.application, 'destroy');\n    }); // TODO: Replace this with your real tests.\n\n    (0, _qunit.test)('it works', async function (assert) {\n      await this.instance.boot();\n      assert.ok(true);\n    });\n  });\n});","define(\"svo-aircraft-tetris/tests/unit/models/aircraft-stand-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | aircraft stand', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('aircraft-stand', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"svo-aircraft-tetris/tests/unit/models/timetable-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | timetable', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('timetable', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"svo-aircraft-tetris/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('svo-aircraft-tetris/config/environment', [], function() {\n  var prefix = 'svo-aircraft-tetris';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('svo-aircraft-tetris/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}